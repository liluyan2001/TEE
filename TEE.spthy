theory TEE
begin

builtins:  asymmetric-encryption, signing, diffie-hellman,symmetric-encryption,hashing
functions: blind/2, unblind/2
equations: unblind( sign(blind(m,r),k),r ) = sign(m,k),
           unblind( blind(m,r),r ) = m
// ****************** Keys ******************
rule Register_pk:           // Registering a public key
    [ Fr(~private_key) ]
  --[ KeyReg( $A ) ]->
    [ 
      !Get_private_key($A, ~private_key), 
      !Get_public_key($A, pk(~private_key)),
      Out(pk(~private_key))
    ]

rule Reveal_private_key:    // Revealing private key
    [ !Get_private_key(A, private_key) ]
  --[ PrivateKeyRevealed(A) ]->
    [ Out(private_key) ]
    
// rule Generate_DH_key_pair: // Registering a DH key
//     [ Fr(~x) ] 
//     --> 
//     [ !Get_dh_private_key($A, ~x),
//       !Get_dh_public_key($A, 'g'^~x),
//       Out('g'^~x)
//     ]

// ****************** Roles ******************
rule Init_Attestation_DatabPVe:       //meaurements
    [ Fr(SML) ]
  --[ ]->
    [ !Get_expected_SML(SML), Out(SML) ]

rule Init_VF:
    [ 
      Fr(~DH_sk_VF),
      !Get_private_key($VF, private_key_vf),
      !Get_public_key($Coordinator, coordinator_public_key)
    ]
  --[ Create($VF,'Verifier'),
      OnlyOnceV(<$VF,'Init'>) ]->
    [ Verifier_0($VF, private_key_vf, ~DH_sk_VF, $Coordinator, coordinator_public_key) 
    ]

rule Init_PV:
    [ 
      Fr(~DH_sk_PV),
      !Get_private_key($PV, private_key_pv),
      !Get_public_key($Coordinator, coordinator_public_key)
    ]
  --[ Create($PV,'Prover'),
      OnlyOnceV(<$PV,'Init'>) ]->
    [ Prover_0( $PV, private_key_pv, ~DH_sk_PV,  $Coordinator, coordinator_public_key)
    ]

rule Init_Coordinator:
    [ 
      !Get_private_key($Coordinator, private_key_coordinator)
    ]
  --[ Create($Coordinator,'Coordinator'),
      OnlyOnceV(<$Coordinator,'Init'>) ]->
    [ Coordinator_0( $Coordinator, private_key_coordinator) ]


restriction AgentOnlyBeOneRole:
"
All agent role1 role2 #i #j. Create(agent,role1) @i & Create(agent,role2) @j ==> role1 = role2
"


restriction OnlyOnceV:
"
All #i #j x. OnlyOnceV(x) @#i & OnlyOnceV(x) @#j ==> #i = #j
"



// ****************** Secure Channel Used to Register Certificate ******************
rule ChanOut_S:
    [ OutS($A, $B, m) ]
  --[ OutS($A, $B, m) ]->
    [ !Sec($A, $B, m) ]

rule ChanIn_S:
    [ !Sec($A, $B, m) ]
  --[ InS($A, $B, m) ]->
    [ InS($A, $B, m) ]

// ****************** Register ******************
/* 

*/

//VF -> Coordinator  <$VF,vf_public_key,'g'^DH_sk_VF>
rule VF_RG_01 [colour=#adfaff]: 
    [
        Verifier_0($VF, private_key_vf, DH_sk_VF, $Coordinator, coordinator_public_key)
    ]
  --[  
        RegisterStarted_VF($VF,$Coordinator,pk(private_key_vf)),
        Step1_VF($VF,$Coordinator,pk(private_key_vf))
    ]->
    [ 
        Verifier_01($VF, private_key_vf, DH_sk_VF, $Coordinator, coordinator_public_key),
        OutS($VF, $Coordinator, <$VF, pk(private_key_vf), 'g'^DH_sk_VF>)
    ]

//VF -> Coordinator  <$PV,pv_public_key,'g'^DH_sk_PV>
rule PV_RG_01 [colour=#ff9900]: 
    [ 
        Prover_0($PV, private_key_pv, DH_sk_PV,  $Coordinator, coordinator_public_key)
    ]
  --[ 
        RegisterStarted_PV($PV,$Coordinator,pk(private_key_pv)),
        Step1_PV($PV,$Coordinator,pk(private_key_pv))
    ]->
    [ 
        Prover_01($PV, private_key_pv, DH_sk_PV, $Coordinator, coordinator_public_key),
        OutS($PV, $Coordinator, <$PV, pk(private_key_pv), 'g'^DH_sk_PV>)
    ]


/* 
  receive <$VF,vf_public_key,'g'^DH_sk_VF> and <$PV,pv_public_key,'g'^DH_sk_PV>
  Coordinator -> VF <vf_cert,root_cert, DH_pk_PV>
  Coordinator -> PV <pv_cert,root_cert, DH_pk_VF>
*/
rule CD_RG_01 [colour=#da6bff]: 
    let
        ID_PK_VF = <$VF, vf_public_key>
        ID_PK_PV = <$PV, pv_public_key>
        coordinator_public_key = pk(private_key_coordinator)
        root_cert = <$Coordinator, coordinator_public_key, sign(<$Coordinator, coordinator_public_key>, private_key_coordinator)> // <$ID, PK, sign(<$ID,PK>,SK_CA))>
        vf_cert = <ID_PK_VF, sign(ID_PK_VF,private_key_coordinator)>
        pv_cert = <ID_PK_PV, sign(ID_PK_PV,private_key_coordinator)>
    in
    [     
        Coordinator_0($Coordinator, private_key_coordinator),
        InS($VF, $Coordinator, <$VF, vf_public_key, DH_pk_VF>),
        InS($PV, $Coordinator, <$PV, pv_public_key, DH_pk_PV>)
    ]
  --[ 
        Step2($Coordinator,$PV,$VF,root_cert,vf_cert,pv_cert)
    ]->
    [ 
        OutS($Coordinator,$PV,<pv_cert,root_cert, DH_pk_VF>),
        OutS($Coordinator,$VF,<vf_cert,root_cert, DH_pk_PV>),
        Coordinator_01($Coordinator, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key)
    ]

// receive <vf_cert,root_cert, DH_pk_PV>
rule VF_RG_02 [colour=#adfaff]:
    let
        vf_cert = <$VF, pk(private_key_vf), vfCertSignCoordinator>
        root_cert = <$Coordinator, coordinator_public_key, rootCertSignCoordinator>
        k_dh =(DH_pk_PV)^DH_sk_VF
    in
    [   
        InS($Coordinator,$VF,<vf_cert,root_cert,DH_pk_PV>),
        Verifier_01($VF, private_key_vf, DH_sk_VF, $Coordinator, coordinator_public_key)
     ]
    --[ 
        Eq(verify(vfCertSignCoordinator,<$VF,pk(private_key_vf)>,coordinator_public_key),true),
        Eq(verify(rootCertSignCoordinator,<$Coordinator,coordinator_public_key>,coordinator_public_key),true),
        Step3_VF($VF,$Coordinator,k_dh,root_cert,vf_cert)
    ]->
    [ 
        Verifier_02($VF,k_dh,vf_cert,root_cert, private_key_vf, DH_sk_VF, $Coordinator, coordinator_public_key)
    ]

// receive <pv_cert,root_cert, DH_pk_VF>    
rule PV_RG_02 [colour=#ff9900]:
    let
        pv_cert = <$PV, pk(private_key_pv), pvCertSignCoordinator>
        root_cert = <$Coordinator, coordinator_public_key, rootCertSignCoordinator>
        k_dh =(DH_pk_VF)^DH_sk_PV
    in
    [ 
        InS($Coordinator,$PV,<pv_cert,root_cert,DH_pk_VF>),
        Prover_01($PV, private_key_pv, DH_sk_PV, $Coordinator, coordinator_public_key)
     ]
    --[ 
        Eq(verify(pvCertSignCoordinator,<$PV, pk(private_key_pv)>,coordinator_public_key),true),
        Eq(verify(rootCertSignCoordinator,<$Coordinator,coordinator_public_key>,coordinator_public_key),true),
        Step3_PV($PV,$Coordinator,k_dh,root_cert,pv_cert)
     ]->
    [ 
        Prover_02($PV, k_dh,pv_cert,root_cert, private_key_pv, DH_sk_PV, $Coordinator, coordinator_public_key)
    ]


// ****************** Protocol ******************

//VF -> PV senc(nonce,k_dh)
rule VF_1 [colour=#adfaff]:
    let
        ct = senc(~nonce,k_dh)
    in
    [ 
        Fr(~nonce),
        Verifier_02($VF,k_dh,vf_cert,root_cert, private_key_vf, DH_sk_VF, $Coordinator, coordinator_public_key)
     ]
  --[ 
        Step4($VF, $PV, ~nonce)
     ]->
    [   Out(ct),
        Verifier_03($VF,k_dh,vf_cert,root_cert,~nonce, private_key_vf, DH_sk_VF, $Coordinator, coordinator_public_key)
     ]

//PV -> coordinator <report,sig = sign(msg2,private_key_pv), msg2 = <$PV,pv_cert,bm1> >     
rule PV_1 [colour=#ff9900]:
    let
        nonce = sdec(ct,k_dh)
        msg1 = <report,nonce>
        bm1 = blind(<h(msg1),k_dh>,~r)
        msg2 = <$PV,pv_cert,bm1>
        sig = sign(msg2,private_key_pv)
        flow_1 = <report,sig,msg2>
    in
    [   In(ct),
        Fr(~r),
        Prover_02($PV, k_dh,pv_cert,root_cert, private_key_pv, DH_sk_PV, $Coordinator, coordinator_public_key),
        !Get_expected_SML(report)
     ]
    --[ 
        Honest($PV),
        Honest($VF),
        AttestStarted($PV,nonce,report),
        Running($PV,$VF,nonce),
        Step5($PV,$VF,nonce,report)
    ]->
    [ 
        Out(flow_1),
        Prover_03($PV,~r, k_dh,nonce,report,bm1,pv_cert,root_cert, private_key_pv, DH_sk_PV, $Coordinator, coordinator_public_key)
    ]

rule Coordinator_1 [colour=#da6bff]:          //attest := 'success'
    let
        msg2 = <$PV,pv_cert,bm1>
    in
   [    Coordinator_01($Coordinator, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key),
        In(<report,sig,msg2>),
        !Get_expected_SML(report)
   ]
  --[ 
        Eq(verify(sig,msg2,pv_public_key),true),
        Commit_report($Coordinator,$PV,report),
        Honest($Coordinator),
        Honest($PV),
        Step6($Coordinator,$PV)
        // Step6(Coordinator,PV,bm1)
   ]->
  [ 
        Coordinator_02($Coordinator, 'success', bm1, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key)
   ]

rule Coordinator_deny [colour=#da6bff]:       //attest := 'failure'
  let
        msg2 = <id_PV,pv_cert,bm1>
  in
  [ 
        Coordinator_01($Coordinator, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key),
        In(<report,$PV,sig,msg2>)//多一个变量
   ]
  --[ 
        Eq(verify(sig,msg2,pv_public_key),true)
   ]->
  [     
        Coordinator_02($Coordinator, 'failure', bm1, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key)
]

//Coordinator -> PV <attest,btk>   
rule Coordinator_2 [colour=#da6bff]:
    let
        btk = sign(bm1,private_key_coordinator)
    in
    [ 
        Coordinator_02($Coordinator, attest, bm1, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key)
     ]
    --[ 
        AttestCreated($Coordinator,$PV,attest),
        Step7($PV,$Coordinator)
        // Step7(PV,Coordinator,btk)
     ]->
    [ 
        Out(<attest,btk>),
        Coordinator_03($Coordinator, attest, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key)
     ]

//PV -> Coordinator <attest,utk,report>      
rule PV_2 [colour=#ff9900]:
    let
        utk = unblind(btk,r)
        msg1 = <report,nonce>
    in
    [ 
        In(<attest,btk>),
        Prover_03($PV,r, k_dh,nonce,report,bm1,pv_cert,root_cert, private_key_pv, DH_sk_PV, $Coordinator, coordinator_public_key)
     ]
    --[
        // Eq(verify(btk,bm1,coordinator_public_key),true),
        Eq(verify(utk,<h(msg1),k_dh>,coordinator_public_key),true),
        Step8($PV,$Coordinator,$VF,attest),
        NotifiedCompletion($PV, $Coordinator, attest)
      ]->
    [ 
        Out(<attest,utk,report>)
     ]

//receive <attest,utk,report>     
rule VF_2 [colour=#adfaff]:
    let
        msg1 =  <report,nonce>
    in
    [ 
        In(<attest,utk,report>),
        Verifier_03($VF,k_dh,vf_cert,root_cert,nonce, private_key_vf, DH_sk_VF, $Coordinator, coordinator_public_key),
        !Get_private_key($PV, private_key_prover),
        !Get_private_key($Coordinator, private_key_coordinator)
    ]
    --[ 
        // Eq(verify(btk,bm1,coordinator_public_key),true),
        Eq(verify(utk,<h(msg1),k_dh>,coordinator_public_key),true),
        Commit($VF, $PV, nonce, attest),
        AttestRecieved($VF, $Coordinator, $PV, nonce, attest),
        Honest($VF),
        Honest($Coordinator),
        Honest($PV),
        Step9($VF, $PV, $Coordinator, nonce, attest),
        Secret(private_key_vf),
        Secret(private_key_prover),
        Secret(private_key_coordinator)
     ]->
    []

// ****************** Restrictions ******************

// Actions marked with Eq should equal (used for ensuring signarute matches)
restriction equality:
    "All x y #i. Eq(x,y) @i ==> x = y"

restriction private_key_unique:
    "All x #i #j. KeyReg(x) @#i & KeyReg(x) @#j 
        ==> #i = #j"

// ****************** Security Properties ******************

//Correctness Trace
lemma correctness_trace:
     exists-trace
"
    Ex VF Coordinator PV vf_public_key pv_public_key root_cert vf_cert pv_cert k_dh
       #a #b #c #d #m #n #o.
    //    nonce report   
    //       #e #f #g #i #j #k #l
       Step1_VF(VF,Coordinator,vf_public_key) @a &
       Step1_PV(PV,Coordinator,pv_public_key) @b &(a<b) &
       Step2(Coordinator,PV,VF,root_cert,vf_cert,pv_cert) @c &(b<c) &
       Step3_VF(VF,Coordinator,k_dh,root_cert,vf_cert) @d & (c<d) &
    //    Step3_PV(PV,Coordinator,k_dh,root_cert,pv_cert) @e &(d<e) &
    //    Step4(VF, PV, nonce) @f & (e<f) &
    //    Step5(PV,VF,nonce,report) @g & (f<g) &
    //    Step6(Coordinator,PV) @i & (g<i) &
    //    Step7(PV,Coordinator) @j & (i<j) &
    //    Step8(PV,Coordinator,VF,'success') @k & (j<k) &
    //    Step9(VF, PV, Coordinator, nonce, 'success') @l & (k<l)&
       Create(VF,'Verifier') @m &
       Create(PV,'Prover') @n &
       Create(Coordinator,'Coordinator') @o
            // & not(Ex agent role #p. Create(agent,role) @p & not(#p = #m) & not(#p = #n) & not(#p = #o) ) 
            & not(Ex A #r. PrivateKeyRevealed(A) @r)
"
end