theory TEE
begin

builtins:  asymmetric-encryption, signing, diffie-hellman,symmetric-encryption,hashing
functions: blind/2, unblind/2 
equations: unblind( sign(blind(m,r),k),r ) = sign(m,k),
           unblind( blind(m,r),r ) = m
// ****************** Keys ******************
rule Register_pk:           // Registering a public key
    [ Fr(~private_key) ]
  --[ KeyReg( $A ) ]->
    [ 
      !Get_private_key($A, ~private_key), 
      !Get_public_key($A, pk(~private_key)),
      Out(pk(~private_key))
    ]

rule Reveal_private_key:    // Revealing private key
    [ !Get_private_key(A, private_key) ]
  --[ PrivateKeyRevealed(A) ]->
    [ Out(private_key) ]

    

// ****************** Roles ******************
rule Init_Attestation_DatabPVe:       //meaurements
    [ Fr(SML) ]
  --[ ]->
    [ !Get_expected_SML(SML), Out(SML) ]

rule Init_VF:
    [ 
      Fr(~DH_sk_VF),
      !Get_private_key($VF, private_key_vf),
      !Get_public_key($Coordinator, coordinator_public_key),
      !Get_public_key($PV, pv_public_key)
    ]
  --[ Create($VF,'Verifier'),
      OnlyOnceV(<$VF,'Init'>) ]->
    [ Verifier_0($VF, private_key_vf, ~DH_sk_VF, $PV,$Coordinator, coordinator_public_key)
    ]

rule Init_PV:
    [ 
      Fr(~DH_sk_PV),
      !Get_private_key($PV, private_key_pv),
      !Get_public_key($Coordinator, coordinator_public_key),
      !Get_public_key($VF, vf_public_key)
    ]
  --[ Create($PV,'Prover'),
      OnlyOnceV(<$PV,'Init'>) ]->
    [ Prover_0( $PV, private_key_pv, ~DH_sk_PV,  $VF,$Coordinator, coordinator_public_key)
    ]

rule Init_Coordinator:
    [ 
      !Get_private_key($Coordinator, private_key_coordinator)
    ]
  --[ Create($Coordinator,'Coordinator'),
      OnlyOnceV(<$Coordinator,'Init'>) ]->
    [ Coordinator_0( $Coordinator, private_key_coordinator) ]


restriction AgentOnlyBeOneRole:
"
All agent role1 role2 #i #j. Create(agent,role1) @i & Create(agent,role2) @j ==> role1 = role2
"


restriction OnlyOnceV:
"
All #i #j x. OnlyOnceV(x) @#i & OnlyOnceV(x) @#j ==> #i = #j
"



// ****************** Secure Channel Used to Register Certificate ******************
rule ChanOut_S:
    [ OutS($A, $B, m) ]
  --[ OutS($A, $B, m) ]->
    [ !Sec($A, $B, m) ]

rule ChanIn_S:
    [ !Sec($A, $B, m) ]
  --[ InS($A, $B, m) ]->
    [ InS($A, $B, m) ]

// ****************** Register ******************
/* 

*/

//VF -> Coordinator  <$VF,vf_public_key,'g'^DH_sk_VF>
rule VF_RG_01 [colour=#adfaff]: 
    [
        Verifier_0($VF, private_key_vf, DH_sk_VF, $PV,$Coordinator, coordinator_public_key)
    ]
  --[  
        RegisterStarted_VF($VF,$Coordinator,pk(private_key_vf)),
        Step1_VF($VF,$Coordinator,pk(private_key_vf))
    ]->
    [ 
        Verifier_01($VF, private_key_vf, DH_sk_VF,$PV, $Coordinator, coordinator_public_key),
        OutS($VF, $Coordinator, <$VF, pk(private_key_vf), 'g'^DH_sk_VF>)
    ]

//PV -> Coordinator  <$PV,pv_public_key,'g'^DH_sk_PV>
rule PV_RG_01 [colour=#ff9900]:
    let
        AK = <private_key_pv, pk(private_key_pv)> 
        AK_h = h(<AK,~counter>)
        pct = blind(AK_h,~blinder)
    in
    [   
        Fr(~counter),
        Fr(~blinder),
        Prover_0($PV, private_key_pv, DH_sk_PV,   $VF,$Coordinator, coordinator_public_key)
    ]
  --[ 
        RegisterStarted_PV($PV,$Coordinator,pk(private_key_pv)),
        Step1_PV($PV,$Coordinator,pk(private_key_pv))
    ]->
    [ 
        Prover_01(~counter,~blinder,$PV, private_key_pv, DH_sk_PV,  $VF,$Coordinator, coordinator_public_key),
        OutS($PV, $Coordinator, <$PV, pk(private_key_pv), 'g'^DH_sk_PV,pct>)
    ]


/* 
  receive <$VF,vf_public_key,'g'^DH_sk_VF> and <$PV,pv_public_key,'g'^DH_sk_PV>
  Coordinator -> VF <vf_cert,root_cert, DH_pk_PV>
  Coordinator -> PV <pv_cert,root_cert, DH_pk_VF>
*/
rule CD_RG_01 [colour=#da6bff]: 
    let
        ID_PK_VF = <$VF, vf_public_key>
        ID_PK_PV = <$PV, pv_public_key>
        coordinator_public_key = pk(private_key_coordinator)
        root_cert = <$Coordinator, coordinator_public_key, sign(<$Coordinator, coordinator_public_key>, private_key_coordinator)> // <$ID, PK, sign(<$ID,PK>,SK_CA))>
        vf_cert = <ID_PK_VF, sign(ID_PK_VF,private_key_coordinator)>
        pv_cert = <ID_PK_PV, sign(ID_PK_PV,private_key_coordinator)>
        Bsig = sign(pct, private_key_coordinator)
    in
    [     
        Coordinator_0($Coordinator, private_key_coordinator),
        InS($VF, $Coordinator, <$VF, vf_public_key, DH_pk_VF>),
        InS($PV, $Coordinator, <$PV, pv_public_key, DH_pk_PV,pct>)
    ]
  --[ 
        Step2($Coordinator,$PV,$VF,root_cert,vf_cert,pv_cert)
    ]->
    [ 
        OutS($Coordinator,$PV,<pv_cert,root_cert, DH_pk_VF,Bsig>),
        OutS($Coordinator,$VF,<vf_cert,root_cert, DH_pk_PV>),
        Coordinator_01($Coordinator, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key)
    ]

// receive <vf_cert,root_cert, DH_pk_PV>
rule VF_RG_02 [colour=#adfaff]:
    let
        ID_PK_VF = <$VF, pk(private_key_vf)>
        vf_cert = <ID_PK_VF, vfCertSignCoordinator>
        root_cert = <$Coordinator, coordinator_public_key, rootCertSignCoordinator>
        k_dh =(DH_pk_PV)^DH_sk_VF
    in
    [   
        InS($Coordinator,$VF,<vf_cert,root_cert,DH_pk_PV>),
        Verifier_01($VF, private_key_vf, DH_sk_VF, $PV,$Coordinator, coordinator_public_key)
     ]
    --[ 
        Eq(verify(vfCertSignCoordinator,ID_PK_VF,coordinator_public_key),true),
        Eq(verify(rootCertSignCoordinator,<$Coordinator,coordinator_public_key>,coordinator_public_key),true),
        Step3_VF($VF,$Coordinator,k_dh,root_cert,vf_cert)
    ]->
    [ 
        Verifier_02($VF,k_dh,private_key_vf, DH_sk_VF,$PV, $Coordinator, coordinator_public_key)
    ]

// receive <pv_cert,root_cert, DH_pk_VF>    
rule PV_RG_02 [colour=#ff9900]:
    let
        ID_PK_PV = <$PV, pk(private_key_pv)>
        pv_cert = <ID_PK_PV, pvCertSignCoordinator>
        root_cert = <$Coordinator, coordinator_public_key, rootCertSignCoordinator>
        k_dh =(DH_pk_VF)^DH_sk_PV
        uct = unblind(bct,blinder) //uct = Sign(<AK_h>,sk_coor)
        AK = <private_key_pv, pk(private_key_pv)> 
        AK_h = h(<AK,counter>)
    in
    [ 
        InS($Coordinator,$PV,<pv_cert,root_cert,DH_pk_VF,bct>),
        Prover_01(counter,blinder,$PV, private_key_pv, DH_sk_PV,  $VF,$Coordinator, coordinator_public_key)
     ]
    --[ 
        Eq(verify(pvCertSignCoordinator,ID_PK_PV,coordinator_public_key),true),
        Eq(verify(rootCertSignCoordinator,<$Coordinator,coordinator_public_key>,coordinator_public_key),true),
        Eq(verify(uct, AK_h,coordinator_public_key),true),
        Step3_PV($PV,$Coordinator,k_dh,root_cert,pv_cert)
     ]->
    [ 
        Prover_02(counter,uct,AK_h,$PV, k_dh,private_key_pv, $VF, $Coordinator, coordinator_public_key)
    ]

// ****************** Protocol ******************

//VF -> PV senc(nonce,k_dh)
rule VF_1 [colour=#adfaff]:
    let
        ct = senc(~nonce,k_dh)
    in
    [ 
        Fr(~nonce),
        Verifier_02($VF,k_dh,private_key_vf, DH_sk_VF, $PV,$Coordinator, coordinator_public_key)
     ]
  --[ 
        Step4($VF, $PV, ~nonce),
        ProtocolStarted($VF, $PV, ~nonce)
     ]->
    [   Out(ct),
        Verifier_03($VF,k_dh,~nonce, private_key_vf, $PV,$Coordinator, coordinator_public_key)
     ]

//PV -> coordinator <report,sig = sign(bm1,private_key_pv), bm1>     
rule PV_1 [colour=#ff9900]:
    let
        nonce = sdec(ct,k_dh)
        msg1 = <report,nonce>
        bm1 = blind(msg1,~r)
        // msg2 = <uct,report,bm1>
        msg2 = <uct,report>
        hash_mac = h(msg2)
        flow_1 = <hash_mac,msg2,AK_h>
    in
    [   In(ct),
        Fr(~r),
        Prover_02(counter,uct,AK_h,$PV, k_dh,private_key_pv, $VF, $Coordinator, coordinator_public_key),
        !Get_expected_SML(report)
     ]
    --[ 
        Honest($PV),
        Honest($VF),
        ReportCreated($PV, report),
        AttestStarted($PV,nonce),
        Running($PV,$VF,nonce),
        Step5($PV,$VF,nonce,report)
    ]->
    [ 
        Out(flow_1),
        OutS($PV, $Coordinator,bm1),
        Prover_03(counter,uct,$PV,~r,k_dh,nonce,report,private_key_pv,$VF,$Coordinator, coordinator_public_key)
    ]

rule Coordinator_1 [colour=#da6bff]:          //attest := 'success'
    let
        // msg2 = <uct,report,bm1>
        msg2 = <uct,report>
    in
   [    
        Coordinator_01($Coordinator, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key),
        In(<hash_mac,msg2,AK_h>),
        InS($PV, $Coordinator, bm1),
        !Get_expected_SML(report)
   ]
  --[ 
        Eq(hash_mac,h(msg2)),
        Eq(verify(uct,AK_h,pk(private_key_coordinator)),true),
        Commit_report($Coordinator,$PV,report),
        Honest($Coordinator),
        Honest($PV),
        Step6($Coordinator,$PV)
   ]->
  [ 
        Coordinator_02($Coordinator, 'success',bm1,private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key)
   ] 

rule Coordinator_deny [colour=#da6bff]:       //attest := 'failure'
    let
        // msg2 = <uct,report,bm1>
        msg2 = <uct,report>
    in
  [ 
        Coordinator_01($Coordinator, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key),
        InS($PV, $Coordinator, bm1),
        In(<$Coordinator,hash_mac,msg2,AK_h>)//多一个变量
   ]
  --[ 
        Eq(hash_mac,h(msg2)),
        Eq(verify(uct,AK_h,pk(private_key_coordinator)),true),
   ]->
  [     
        Coordinator_02($Coordinator, 'failure', bm1,private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key)
]

//Coordinator -> PV <attest,btk>   
rule Coordinator_2 [colour=#da6bff]:
    let
        btk = sign(bm1,private_key_coordinator)
    in
    [ 
        Coordinator_02($Coordinator, attest, bm1,private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key)
     ]
    --[ 
        AttestCreated($Coordinator,$PV,attest),
        Step7($PV,$Coordinator)
     ]->
    [ 
        Out(<attest,btk>),
        Coordinator_03($Coordinator, attest, private_key_coordinator, $PV, pv_public_key, $VF, vf_public_key)
     ]

//PV -> VF <attest,utk,report>      
rule PV_2 [colour=#ff9900]:
    let
        utk = unblind(btk,~r)
        msg1 = <report,nonce>
    in
    [ 
        In(<attest,btk>),
        Prover_03(counter,bct,$PV,~r,k_dh,nonce,report,private_key_pv,$VF,$Coordinator, coordinator_public_key)
    ]
    --[
        Eq(verify(utk,msg1,coordinator_public_key),true),
        Step8($PV,$Coordinator,$VF,attest),
        NotifiedCompletion($PV, $Coordinator, attest)
      ]->
    [ 
        Out(<attest,utk,report>)
     ]

//receive <attest,utk,report>     
rule VF_2 [colour=#adfaff]:
    let
        msg1 = <report,nonce>
    in
    [ 
        In(<attest,utk,report>),
        Verifier_03($VF,k_dh,nonce, private_key_vf, $PV,$Coordinator, coordinator_public_key),
        !Get_private_key($PV, private_key_prover),
        !Get_private_key($Coordinator, private_key_coordinator)
    ]
    --[ 
        Eq(verify(utk,msg1,coordinator_public_key),true),
        Commit($VF, $PV, nonce, attest),
        AttestRecieved($VF, $Coordinator, $PV, nonce, attest),
        Honest($VF),
        Honest($Coordinator),
        Honest($PV),
        Step9($VF, $PV, $Coordinator, nonce, attest),
        Secret_dh(k_dh),
        Secret(private_key_vf),
        Secret(private_key_prover),
        Secret(private_key_coordinator),
        Secret_nonce(nonce)
     ]->
    []

// ****************** Restrictions ******************

// Actions marked with Eq should equal (used for ensuring signarute matches)
restriction equality:
    "All x y #i. Eq(x,y) @i ==> x = y"

restriction private_key_unique:
    "All x #i #j. KeyReg(x) @#i & KeyReg(x) @#j 
        ==> #i = #j"

// ****************** Security Properties ******************

/*
* Correctness Trace
* 
* We verify for all models that there is a trace where the protocol completes
* where every step of the trace happens exactly in the expected order
*/
lemma correctness_trace:
     exists-trace
"
    Ex VF Coordinator PV vf_public_key pv_public_key root_cert vf_cert pv_cert k_dh nonce report
       #a #b #c #d #e #f #g #i #j  #k #l #m #n #o.        
       Step1_VF(VF,Coordinator,vf_public_key) @a &
       Step1_PV(PV,Coordinator,pv_public_key) @b &(a<b) &
       Step2(Coordinator,PV,VF,root_cert,vf_cert,pv_cert) @c &(b<c) &
       Step3_VF(VF,Coordinator,k_dh,root_cert,vf_cert) @d & (c<d) &
       Step3_PV(PV,Coordinator,k_dh,root_cert,pv_cert) @e &(d<e) &
       Step4(VF, PV, nonce) @f & (e<f) &
       Step5(PV,VF,nonce,report) @g & (f<g) &
       Step6(Coordinator,PV) @i & (g<i) &
       Step7(PV,Coordinator) @j & (i<j) &
       Step8(PV,Coordinator,VF,'success') @k & (j<k) &
       Step9(VF, PV, Coordinator, nonce, 'success') @l & (k<l)&
       Create(VF,'Verifier') @m &
       Create(PV,'Prover') @n &
       Create(Coordinator,'Coordinator') @o
            // & not(Ex agent role #p. Create(agent,role) @p & not(#p = #m) & not(#p = #n) & not(#p = #o) ) 
            & not(Ex A #r. PrivateKeyRevealed(A) @r)
"

/*
===========================
Authenticity of prover
===========================
*/
// S1.1 One Way Injective Agreement - Verifier - Prover
lemma S1_1_o_w_r_i_agree_verif_prover:
    "All VF prover nonce attest #i. 
        Commit(VF, prover, nonce, attest) @i
        ==>  ( Ex #j #k. AttestStarted(prover, nonce) @j
                & ProtocolStarted(VF, prover, nonce) @k
                & k < j
                & j < i
                & not (Ex VF2 prover2 #i2. Commit(VF2, prover2, nonce, attest) @i2
                    & not (#i2 = #i)))
        | (Ex A #r. PrivateKeyRevealed(A) @r & Honest(A) @i)"
/*
===========================
Authenticity of Verifier
===========================
*/
// S1.2 Injective Agreement - prover - Verifier
lemma S1_2_inj_agree_prover_verif:
    "All prover VF nonce #i. 
        Running(prover, VF, nonce)  @i 
        ==>  ( Ex #j. ProtocolStarted(VF, prover, nonce) @j
                & j < i 
                & not (Ex prover2 VF2 #i2. Running(prover2, VF2, nonce) @i2
                    & not (#i2 = #i)))
        | (Ex A #r. PrivateKeyRevealed(A) @r & Honest(A) @i)"

/*
===========================
Authenticity of coordinator
===========================
*/
// S1.3 One-Way Injective Agreement - Verifier - coordinator
lemma S1_3_o_w_i_agree_verif_server:
    "All VF CD prover nonce attest #i. 
        AttestRecieved(VF, CD, prover, nonce, attest) @i 
        ==>  ( Ex CD #j. AttestCreated(CD, prover,attest) @j
                & j < i 
                & not (Ex VF2 CD2 #i2. AttestRecieved(VF2, CD2, prover, nonce, attest) @i2
                    & not (#i2 = #i)))
        | (Ex A #r. PrivateKeyRevealed(A) @r & Honest(A) @i)"
/*
================================
Integrity of Attestation Data
================================
*/

// S2 One-Way Non-Injective Agreement - Server - Prover
lemma S2_o_w_non_i_agree_server_prover:
    "All CD prover report #i. 
        Commit_report(CD, prover,report) @i
        ==>  ( Ex #j. ReportCreated(prover, report) @j )
        | (Ex A #r. PrivateKeyRevealed(A) @r & Honest(A) @i)"

/*
===========================
Secrecy
===========================
*/

// S3 Secrecy Attestation Keys
lemma S3_secrecy_key:
    "All x #i.
        Secret(x) @i 
        ==> not (Ex #j. K(x) @j)
        | (Ex A #r. PrivateKeyRevealed(A) @r & Honest(A) @i)"

end
